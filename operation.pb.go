// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: operation.proto

package ngtype

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OpType int32

const (
	OpType_TX OpType = 0
)

var OpType_name = map[int32]string{
	0: "TX",
}

var OpType_value = map[string]int32{
	"TX": 0,
}

func (x OpType) String() string {
	return proto.EnumName(OpType_name, int32(x))
}

func (OpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_619dee0fded31cb3, []int{0}
}

type Operation struct {
	Type          OpType `protobuf:"varint,1,opt,name=type,proto3,enum=ngtype.OpType" json:"type,omitempty"`
	From          uint64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To            uint64 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	Fee           []byte `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee,omitempty"`
	Value         []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Nonce         uint64 `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	PrevVaultHash []byte `protobuf:"bytes,7,opt,name=prev_vault_hash,json=prevVaultHash,proto3" json:"prev_vault_hash,omitempty"`
	// sign
	R []byte `protobuf:"bytes,8,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,9,opt,name=s,proto3" json:"s,omitempty"`
	// extension
	Extra                []byte   `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_619dee0fded31cb3, []int{0}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

func (m *Operation) GetType() OpType {
	if m != nil {
		return m.Type
	}
	return OpType_TX
}

func (m *Operation) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Operation) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *Operation) GetFee() []byte {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *Operation) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Operation) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Operation) GetPrevVaultHash() []byte {
	if m != nil {
		return m.PrevVaultHash
	}
	return nil
}

func (m *Operation) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *Operation) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *Operation) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterEnum("ngtype.OpType", OpType_name, OpType_value)
	proto.RegisterType((*Operation)(nil), "ngtype.Operation")
}

func init() { proto.RegisterFile("operation.proto", fileDescriptor_619dee0fded31cb3) }

var fileDescriptor_619dee0fded31cb3 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x7b, 0x69, 0x6a, 0xe8, 0xa9, 0xa4, 0xd1, 0x89, 0xe1, 0xa6, 0x28, 0xea, 0x80, 0x22,
	0x86, 0x0c, 0xf0, 0x06, 0x4c, 0x6c, 0x48, 0x51, 0x85, 0xd8, 0x2a, 0x83, 0x5c, 0x82, 0x54, 0x62,
	0xcb, 0x71, 0x23, 0xf2, 0x26, 0x3c, 0x12, 0x23, 0x8f, 0x80, 0xc2, 0xc8, 0x4b, 0x20, 0xdb, 0xea,
	0x76, 0xdf, 0xf7, 0xfb, 0xb7, 0xe5, 0xc3, 0xb5, 0x36, 0xca, 0x4a, 0xf7, 0xa6, 0xbb, 0xda, 0x58,
	0xed, 0x34, 0x89, 0xee, 0xd5, 0x8d, 0x46, 0x6d, 0xfe, 0x00, 0x97, 0x0f, 0xa7, 0x8c, 0x36, 0x98,
	0x7a, 0xcb, 0x50, 0x42, 0x95, 0xdd, 0x64, 0x75, 0x3c, 0x54, 0x6b, 0xb3, 0x1d, 0x8d, 0x6a, 0x42,
	0x46, 0x84, 0xe9, 0xde, 0xea, 0x77, 0x4e, 0x4a, 0xa8, 0xd2, 0x26, 0xcc, 0x94, 0x61, 0xe2, 0x34,
	0xcf, 0x83, 0x49, 0x9c, 0xa6, 0x1c, 0xe7, 0x7b, 0xa5, 0x38, 0x2d, 0xa1, 0x5a, 0x35, 0x7e, 0xa4,
	0x4b, 0x5c, 0x0c, 0xf2, 0x70, 0x54, 0xbc, 0x08, 0x2e, 0x82, 0xb7, 0x9d, 0xee, 0x5e, 0x14, 0x8b,
	0x50, 0x8d, 0x40, 0x57, 0xb8, 0x36, 0x56, 0x0d, 0xbb, 0x41, 0x1e, 0x0f, 0x6e, 0xd7, 0xca, 0xbe,
	0xe5, 0xb3, 0xd0, 0xba, 0xf0, 0xfa, 0xd1, 0xdb, 0x7b, 0xd9, 0xb7, 0xb4, 0x42, 0xb0, 0x7c, 0x1e,
	0x12, 0xb0, 0x9e, 0x7a, 0x5e, 0x46, 0xea, 0xfd, 0xcd, 0xea, 0xc3, 0x59, 0xc9, 0x18, 0xdf, 0x0b,
	0x70, 0x9d, 0xa3, 0x88, 0x7f, 0x21, 0x81, 0xc9, 0xf6, 0x29, 0x9f, 0xdd, 0xe5, 0x5f, 0x53, 0x01,
	0xdf, 0x53, 0x01, 0x3f, 0x53, 0x01, 0x9f, 0xbf, 0xc5, 0xec, 0x59, 0x84, 0x05, 0xdd, 0xfe, 0x07,
	0x00, 0x00, 0xff, 0xff, 0xf7, 0xcd, 0x24, 0xaf, 0x33, 0x01, 0x00, 0x00,
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintOperation(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.S) > 0 {
		i -= len(m.S)
		copy(dAtA[i:], m.S)
		i = encodeVarintOperation(dAtA, i, uint64(len(m.S)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.R) > 0 {
		i -= len(m.R)
		copy(dAtA[i:], m.R)
		i = encodeVarintOperation(dAtA, i, uint64(len(m.R)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PrevVaultHash) > 0 {
		i -= len(m.PrevVaultHash)
		copy(dAtA[i:], m.PrevVaultHash)
		i = encodeVarintOperation(dAtA, i, uint64(len(m.PrevVaultHash)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Nonce != 0 {
		i = encodeVarintOperation(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintOperation(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintOperation(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x22
	}
	if m.To != 0 {
		i = encodeVarintOperation(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x18
	}
	if m.From != 0 {
		i = encodeVarintOperation(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintOperation(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOperation(dAtA []byte, offset int, v uint64) int {
	offset -= sovOperation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovOperation(uint64(m.Type))
	}
	if m.From != 0 {
		n += 1 + sovOperation(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovOperation(uint64(m.To))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovOperation(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOperation(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovOperation(uint64(m.Nonce))
	}
	l = len(m.PrevVaultHash)
	if l > 0 {
		n += 1 + l + sovOperation(uint64(l))
	}
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovOperation(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovOperation(uint64(l))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovOperation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOperation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOperation(x uint64) (n int) {
	return sovOperation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= OpType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = append(m.Fee[:0], dAtA[iNdEx:postIndex]...)
			if m.Fee == nil {
				m.Fee = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevVaultHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevVaultHash = append(m.PrevVaultHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevVaultHash == nil {
				m.PrevVaultHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = append(m.R[:0], dAtA[iNdEx:postIndex]...)
			if m.R == nil {
				m.R = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOperation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOperation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOperation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOperation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOperation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOperation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOperation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOperation = fmt.Errorf("proto: unexpected end of group")
)
