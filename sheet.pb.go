// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sheet.proto

package ngtype

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Sheet struct {
	PrevVaultHash        []byte              `protobuf:"bytes,1,opt,name=prev_vault_hash,json=prevVaultHash,proto3" json:"prev_vault_hash,omitempty"`
	Rows                 map[uint64]*Account `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Sheet) Reset()         { *m = Sheet{} }
func (m *Sheet) String() string { return proto.CompactTextString(m) }
func (*Sheet) ProtoMessage()    {}
func (*Sheet) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{0}
}
func (m *Sheet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sheet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sheet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sheet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sheet.Merge(m, src)
}
func (m *Sheet) XXX_Size() int {
	return m.Size()
}
func (m *Sheet) XXX_DiscardUnknown() {
	xxx_messageInfo_Sheet.DiscardUnknown(m)
}

var xxx_messageInfo_Sheet proto.InternalMessageInfo

func (m *Sheet) GetPrevVaultHash() []byte {
	if m != nil {
		return m.PrevVaultHash
	}
	return nil
}

func (m *Sheet) GetRows() map[uint64]*Account {
	if m != nil {
		return m.Rows
	}
	return nil
}

func init() {
	proto.RegisterType((*Sheet)(nil), "ngtype.Sheet")
	proto.RegisterMapType((map[uint64]*Account)(nil), "ngtype.Sheet.RowsEntry")
}

func init() { proto.RegisterFile("sheet.proto", fileDescriptor_2edb8d084c32530c) }

var fileDescriptor_2edb8d084c32530c = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xce, 0x48, 0x4d,
	0x2d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcb, 0x4b, 0x2f, 0xa9, 0x2c, 0x48, 0x95,
	0xe2, 0x4d, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x83, 0x0a, 0x2b, 0x2d, 0x63, 0xe4, 0x62, 0x0d, 0x06,
	0x29, 0x13, 0x52, 0xe3, 0xe2, 0x2f, 0x28, 0x4a, 0x2d, 0x8b, 0x2f, 0x4b, 0x2c, 0xcd, 0x29, 0x89,
	0xcf, 0x48, 0x2c, 0xce, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0xe2, 0x05, 0x09, 0x87, 0x81,
	0x44, 0x3d, 0x12, 0x8b, 0x33, 0x84, 0xb4, 0xb9, 0x58, 0x8a, 0xf2, 0xcb, 0x8b, 0x25, 0x98, 0x14,
	0x98, 0x35, 0xb8, 0x8d, 0xc4, 0xf5, 0x20, 0xe6, 0xea, 0x81, 0x0d, 0xd1, 0x0b, 0xca, 0x2f, 0x2f,
	0x76, 0xcd, 0x2b, 0x29, 0xaa, 0x0c, 0x02, 0x2b, 0x92, 0xf2, 0xe0, 0xe2, 0x84, 0x0b, 0x09, 0x09,
	0x70, 0x31, 0x67, 0xa7, 0x56, 0x82, 0x4d, 0x65, 0x09, 0x02, 0x31, 0x85, 0x54, 0xb9, 0x58, 0xcb,
	0x12, 0x73, 0x4a, 0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0xf8, 0x61, 0x86, 0x39, 0x42,
	0xdc, 0x18, 0x04, 0x91, 0xb5, 0x62, 0xb2, 0x60, 0x74, 0x12, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2,
	0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63, 0x48, 0x62, 0x03, 0xfb, 0xc0,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x41, 0x9c, 0xa6, 0xe7, 0x00, 0x00, 0x00,
}

func (m *Sheet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sheet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sheet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rows) > 0 {
		for k := range m.Rows {
			v := m.Rows[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSheet(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSheet(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSheet(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PrevVaultHash) > 0 {
		i -= len(m.PrevVaultHash)
		copy(dAtA[i:], m.PrevVaultHash)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.PrevVaultHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSheet(dAtA []byte, offset int, v uint64) int {
	offset -= sovSheet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Sheet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrevVaultHash)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if len(m.Rows) > 0 {
		for k, v := range m.Rows {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSheet(uint64(l))
			}
			mapEntrySize := 1 + sovSheet(uint64(k)) + l
			n += mapEntrySize + 1 + sovSheet(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSheet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSheet(x uint64) (n int) {
	return sovSheet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Sheet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sheet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sheet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevVaultHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevVaultHash = append(m.PrevVaultHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevVaultHash == nil {
				m.PrevVaultHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rows == nil {
				m.Rows = make(map[uint64]*Account)
			}
			var mapkey uint64
			var mapvalue *Account
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSheet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSheet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSheet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSheet
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSheet
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Account{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSheet(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSheet
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rows[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSheet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSheet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSheet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSheet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSheet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSheet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSheet = fmt.Errorf("proto: unexpected end of group")
)
